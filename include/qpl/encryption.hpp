#ifndef QPL_ENCRYPTION_HPP
#define QPL_ENCRYPTION_HPP
#pragma once
#include <cstdlib>
#include <memory>
#include <array>
#include <vector>
#include <string>

#include <qpl/qpldeclspec.hpp>
#include <qpl/vardef.hpp>
#include <qpl/memory.hpp>

namespace qpl {

	namespace detail {
		struct aes_tables_t {
			std::array<qpl::u8, 256> mul1;
			std::array<qpl::u8, 256> mul2;
			std::array<qpl::u8, 256> mul3;
			std::array<qpl::u8, 255> rcon;
			std::array<qpl::u8, 256> sbox;
			std::array<qpl::u8, 256> sbox_inv;
		};

		namespace aes_tables {
			constexpr std::array<qpl::u8, 256> mul1 = {
				0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0x0au, 0x0bu, 0x0cu, 0x0du, 0x0eu, 0x0fu,
				0x10u, 0x11u, 0x12u, 0x13u, 0x14u, 0x15u, 0x16u, 0x17u, 0x18u, 0x19u, 0x1au, 0x1bu, 0x1cu, 0x1du, 0x1eu, 0x1fu,
				0x20u, 0x21u, 0x22u, 0x23u, 0x24u, 0x25u, 0x26u, 0x27u, 0x28u, 0x29u, 0x2au, 0x2bu, 0x2cu, 0x2du, 0x2eu, 0x2fu,
				0x30u, 0x31u, 0x32u, 0x33u, 0x34u, 0x35u, 0x36u, 0x37u, 0x38u, 0x39u, 0x3au, 0x3bu, 0x3cu, 0x3du, 0x3eu, 0x3fu,
				0x40u, 0x41u, 0x42u, 0x43u, 0x44u, 0x45u, 0x46u, 0x47u, 0x48u, 0x49u, 0x4au, 0x4bu, 0x4cu, 0x4du, 0x4eu, 0x4fu,
				0x50u, 0x51u, 0x52u, 0x53u, 0x54u, 0x55u, 0x56u, 0x57u, 0x58u, 0x59u, 0x5au, 0x5bu, 0x5cu, 0x5du, 0x5eu, 0x5fu,
				0x60u, 0x61u, 0x62u, 0x63u, 0x64u, 0x65u, 0x66u, 0x67u, 0x68u, 0x69u, 0x6au, 0x6bu, 0x6cu, 0x6du, 0x6eu, 0x6fu,
				0x70u, 0x71u, 0x72u, 0x73u, 0x74u, 0x75u, 0x76u, 0x77u, 0x78u, 0x79u, 0x7au, 0x7bu, 0x7cu, 0x7du, 0x7eu, 0x7fu,
				0x80u, 0x81u, 0x82u, 0x83u, 0x84u, 0x85u, 0x86u, 0x87u, 0x88u, 0x89u, 0x8au, 0x8bu, 0x8cu, 0x8du, 0x8eu, 0x8fu,
				0x90u, 0x91u, 0x92u, 0x93u, 0x94u, 0x95u, 0x96u, 0x97u, 0x98u, 0x99u, 0x9au, 0x9bu, 0x9cu, 0x9du, 0x9eu, 0x9fu,
				0xa0u, 0xa1u, 0xa2u, 0xa3u, 0xa4u, 0xa5u, 0xa6u, 0xa7u, 0xa8u, 0xa9u, 0xaau, 0xabu, 0xacu, 0xadu, 0xaeu, 0xafu,
				0xb0u, 0xb1u, 0xb2u, 0xb3u, 0xb4u, 0xb5u, 0xb6u, 0xb7u, 0xb8u, 0xb9u, 0xbau, 0xbbu, 0xbcu, 0xbdu, 0xbeu, 0xbfu,
				0xc0u, 0xc1u, 0xc2u, 0xc3u, 0xc4u, 0xc5u, 0xc6u, 0xc7u, 0xc8u, 0xc9u, 0xcau, 0xcbu, 0xccu, 0xcdu, 0xceu, 0xcfu,
				0xd0u, 0xd1u, 0xd2u, 0xd3u, 0xd4u, 0xd5u, 0xd6u, 0xd7u, 0xd8u, 0xd9u, 0xdau, 0xdbu, 0xdcu, 0xddu, 0xdeu, 0xdfu,
				0xe0u, 0xe1u, 0xe2u, 0xe3u, 0xe4u, 0xe5u, 0xe6u, 0xe7u, 0xe8u, 0xe9u, 0xeau, 0xebu, 0xecu, 0xedu, 0xeeu, 0xefu,
				0xf0u, 0xf1u, 0xf2u, 0xf3u, 0xf4u, 0xf5u, 0xf6u, 0xf7u, 0xf8u, 0xf9u, 0xfau, 0xfbu, 0xfcu, 0xfdu, 0xfeu, 0xffu,
			};
			constexpr std::array<qpl::u8, 256> mul2 = {
				0x00u, 0x02u, 0x04u, 0x06u, 0x08u, 0x0au, 0x0cu, 0x0eu, 0x10u, 0x12u, 0x14u, 0x16u, 0x18u, 0x1au, 0x1cu, 0x1eu,
				0x20u, 0x22u, 0x24u, 0x26u, 0x28u, 0x2au, 0x2cu, 0x2eu, 0x30u, 0x32u, 0x34u, 0x36u, 0x38u, 0x3au, 0x3cu, 0x3eu,
				0x40u, 0x42u, 0x44u, 0x46u, 0x48u, 0x4au, 0x4cu, 0x4eu, 0x50u, 0x52u, 0x54u, 0x56u, 0x58u, 0x5au, 0x5cu, 0x5eu,
				0x60u, 0x62u, 0x64u, 0x66u, 0x68u, 0x6au, 0x6cu, 0x6eu, 0x70u, 0x72u, 0x74u, 0x76u, 0x78u, 0x7au, 0x7cu, 0x7eu,
				0x80u, 0x82u, 0x84u, 0x86u, 0x88u, 0x8au, 0x8cu, 0x8eu, 0x90u, 0x92u, 0x94u, 0x96u, 0x98u, 0x9au, 0x9cu, 0x9eu,
				0xa0u, 0xa2u, 0xa4u, 0xa6u, 0xa8u, 0xaau, 0xacu, 0xaeu, 0xb0u, 0xb2u, 0xb4u, 0xb6u, 0xb8u, 0xbau, 0xbcu, 0xbeu,
				0xc0u, 0xc2u, 0xc4u, 0xc6u, 0xc8u, 0xcau, 0xccu, 0xceu, 0xd0u, 0xd2u, 0xd4u, 0xd6u, 0xd8u, 0xdau, 0xdcu, 0xdeu,
				0xe0u, 0xe2u, 0xe4u, 0xe6u, 0xe8u, 0xeau, 0xecu, 0xeeu, 0xf0u, 0xf2u, 0xf4u, 0xf6u, 0xf8u, 0xfau, 0xfcu, 0xfeu,
				0x1bu, 0x19u, 0x1fu, 0x1du, 0x13u, 0x11u, 0x17u, 0x15u, 0x0bu, 0x09u, 0x0fu, 0x0du, 0x03u, 0x01u, 0x07u, 0x05u,
				0x3bu, 0x39u, 0x3fu, 0x3du, 0x33u, 0x31u, 0x37u, 0x35u, 0x2bu, 0x29u, 0x2fu, 0x2du, 0x23u, 0x21u, 0x27u, 0x25u,
				0x5bu, 0x59u, 0x5fu, 0x5du, 0x53u, 0x51u, 0x57u, 0x55u, 0x4bu, 0x49u, 0x4fu, 0x4du, 0x43u, 0x41u, 0x47u, 0x45u,
				0x7bu, 0x79u, 0x7fu, 0x7du, 0x73u, 0x71u, 0x77u, 0x75u, 0x6bu, 0x69u, 0x6fu, 0x6du, 0x63u, 0x61u, 0x67u, 0x65u,
				0x9bu, 0x99u, 0x9fu, 0x9du, 0x93u, 0x91u, 0x97u, 0x95u, 0x8bu, 0x89u, 0x8fu, 0x8du, 0x83u, 0x81u, 0x87u, 0x85u,
				0xbbu, 0xb9u, 0xbfu, 0xbdu, 0xb3u, 0xb1u, 0xb7u, 0xb5u, 0xabu, 0xa9u, 0xafu, 0xadu, 0xa3u, 0xa1u, 0xa7u, 0xa5u,
				0xdbu, 0xd9u, 0xdfu, 0xddu, 0xd3u, 0xd1u, 0xd7u, 0xd5u, 0xcbu, 0xc9u, 0xcfu, 0xcdu, 0xc3u, 0xc1u, 0xc7u, 0xc5u,
				0xfbu, 0xf9u, 0xffu, 0xfdu, 0xf3u, 0xf1u, 0xf7u, 0xf5u, 0xebu, 0xe9u, 0xefu, 0xedu, 0xe3u, 0xe1u, 0xe7u, 0xe5u,
			};
			constexpr std::array<qpl::u8, 256> mul3 = {
				0x00u, 0x03u, 0x06u, 0x05u, 0x0cu, 0x0fu, 0x0au, 0x09u, 0x18u, 0x1bu, 0x1eu, 0x1du, 0x14u, 0x17u, 0x12u, 0x11u,
				0x30u, 0x33u, 0x36u, 0x35u, 0x3cu, 0x3fu, 0x3au, 0x39u, 0x28u, 0x2bu, 0x2eu, 0x2du, 0x24u, 0x27u, 0x22u, 0x21u,
				0x60u, 0x63u, 0x66u, 0x65u, 0x6cu, 0x6fu, 0x6au, 0x69u, 0x78u, 0x7bu, 0x7eu, 0x7du, 0x74u, 0x77u, 0x72u, 0x71u,
				0x50u, 0x53u, 0x56u, 0x55u, 0x5cu, 0x5fu, 0x5au, 0x59u, 0x48u, 0x4bu, 0x4eu, 0x4du, 0x44u, 0x47u, 0x42u, 0x41u,
				0xc0u, 0xc3u, 0xc6u, 0xc5u, 0xccu, 0xcfu, 0xcau, 0xc9u, 0xd8u, 0xdbu, 0xdeu, 0xddu, 0xd4u, 0xd7u, 0xd2u, 0xd1u,
				0xf0u, 0xf3u, 0xf6u, 0xf5u, 0xfcu, 0xffu, 0xfau, 0xf9u, 0xe8u, 0xebu, 0xeeu, 0xedu, 0xe4u, 0xe7u, 0xe2u, 0xe1u,
				0xa0u, 0xa3u, 0xa6u, 0xa5u, 0xacu, 0xafu, 0xaau, 0xa9u, 0xb8u, 0xbbu, 0xbeu, 0xbdu, 0xb4u, 0xb7u, 0xb2u, 0xb1u,
				0x90u, 0x93u, 0x96u, 0x95u, 0x9cu, 0x9fu, 0x9au, 0x99u, 0x88u, 0x8bu, 0x8eu, 0x8du, 0x84u, 0x87u, 0x82u, 0x81u,
				0x9bu, 0x98u, 0x9du, 0x9eu, 0x97u, 0x94u, 0x91u, 0x92u, 0x83u, 0x80u, 0x85u, 0x86u, 0x8fu, 0x8cu, 0x89u, 0x8au,
				0xabu, 0xa8u, 0xadu, 0xaeu, 0xa7u, 0xa4u, 0xa1u, 0xa2u, 0xb3u, 0xb0u, 0xb5u, 0xb6u, 0xbfu, 0xbcu, 0xb9u, 0xbau,
				0xfbu, 0xf8u, 0xfdu, 0xfeu, 0xf7u, 0xf4u, 0xf1u, 0xf2u, 0xe3u, 0xe0u, 0xe5u, 0xe6u, 0xefu, 0xecu, 0xe9u, 0xeau,
				0xcbu, 0xc8u, 0xcdu, 0xceu, 0xc7u, 0xc4u, 0xc1u, 0xc2u, 0xd3u, 0xd0u, 0xd5u, 0xd6u, 0xdfu, 0xdcu, 0xd9u, 0xdau,
				0x5bu, 0x58u, 0x5du, 0x5eu, 0x57u, 0x54u, 0x51u, 0x52u, 0x43u, 0x40u, 0x45u, 0x46u, 0x4fu, 0x4cu, 0x49u, 0x4au,
				0x6bu, 0x68u, 0x6du, 0x6eu, 0x67u, 0x64u, 0x61u, 0x62u, 0x73u, 0x70u, 0x75u, 0x76u, 0x7fu, 0x7cu, 0x79u, 0x7au,
				0x3bu, 0x38u, 0x3du, 0x3eu, 0x37u, 0x34u, 0x31u, 0x32u, 0x23u, 0x20u, 0x25u, 0x26u, 0x2fu, 0x2cu, 0x29u, 0x2au,
				0x0bu, 0x08u, 0x0du, 0x0eu, 0x07u, 0x04u, 0x01u, 0x02u, 0x13u, 0x10u, 0x15u, 0x16u, 0x1fu, 0x1cu, 0x19u, 0x1au,
			};
			constexpr std::array<qpl::u8, 255> rcon = {
				0x8du, 0x01u, 0x02u, 0x04u, 0x08u, 0x10u, 0x20u, 0x40u, 0x80u, 0x1bu, 0x36u, 0x6cu, 0xd8u, 0xabu, 0x4du, 0x9au,
				0x2fu, 0x5eu, 0xbcu, 0x63u, 0xc6u, 0x97u, 0x35u, 0x6au, 0xd4u, 0xb3u, 0x7du, 0xfau, 0xefu, 0xc5u, 0x91u, 0x39u,
				0x72u, 0xe4u, 0xd3u, 0xbdu, 0x61u, 0xc2u, 0x9fu, 0x25u, 0x4au, 0x94u, 0x33u, 0x66u, 0xccu, 0x83u, 0x1du, 0x3au,
				0x74u, 0xe8u, 0xcbu, 0x8du, 0x01u, 0x02u, 0x04u, 0x08u, 0x10u, 0x20u, 0x40u, 0x80u, 0x1bu, 0x36u, 0x6cu, 0xd8u,
				0xabu, 0x4du, 0x9au, 0x2fu, 0x5eu, 0xbcu, 0x63u, 0xc6u, 0x97u, 0x35u, 0x6au, 0xd4u, 0xb3u, 0x7du, 0xfau, 0xefu,
				0xc5u, 0x91u, 0x39u, 0x72u, 0xe4u, 0xd3u, 0xbdu, 0x61u, 0xc2u, 0x9fu, 0x25u, 0x4au, 0x94u, 0x33u, 0x66u, 0xccu,
				0x83u, 0x1du, 0x3au, 0x74u, 0xe8u, 0xcbu, 0x8du, 0x01u, 0x02u, 0x04u, 0x08u, 0x10u, 0x20u, 0x40u, 0x80u, 0x1bu,
				0x36u, 0x6cu, 0xd8u, 0xabu, 0x4du, 0x9au, 0x2fu, 0x5eu, 0xbcu, 0x63u, 0xc6u, 0x97u, 0x35u, 0x6au, 0xd4u, 0xb3u,
				0x7du, 0xfau, 0xefu, 0xc5u, 0x91u, 0x39u, 0x72u, 0xe4u, 0xd3u, 0xbdu, 0x61u, 0xc2u, 0x9fu, 0x25u, 0x4au, 0x94u,
				0x33u, 0x66u, 0xccu, 0x83u, 0x1du, 0x3au, 0x74u, 0xe8u, 0xcbu, 0x8du, 0x01u, 0x02u, 0x04u, 0x08u, 0x10u, 0x20u,
				0x40u, 0x80u, 0x1bu, 0x36u, 0x6cu, 0xd8u, 0xabu, 0x4du, 0x9au, 0x2fu, 0x5eu, 0xbcu, 0x63u, 0xc6u, 0x97u, 0x35u,
				0x6au, 0xd4u, 0xb3u, 0x7du, 0xfau, 0xefu, 0xc5u, 0x91u, 0x39u, 0x72u, 0xe4u, 0xd3u, 0xbdu, 0x61u, 0xc2u, 0x9fu,
				0x25u, 0x4au, 0x94u, 0x33u, 0x66u, 0xccu, 0x83u, 0x1du, 0x3au, 0x74u, 0xe8u, 0xcbu, 0x8du, 0x01u, 0x02u, 0x04u,
				0x08u, 0x10u, 0x20u, 0x40u, 0x80u, 0x1bu, 0x36u, 0x6cu, 0xd8u, 0xabu, 0x4du, 0x9au, 0x2fu, 0x5eu, 0xbcu, 0x63u,
				0xc6u, 0x97u, 0x35u, 0x6au, 0xd4u, 0xb3u, 0x7du, 0xfau, 0xefu, 0xc5u, 0x91u, 0x39u, 0x72u, 0xe4u, 0xd3u, 0xbdu,
				0x61u, 0xc2u, 0x9fu, 0x25u, 0x4au, 0x94u, 0x33u, 0x66u, 0xccu, 0x83u, 0x1du, 0x3au, 0x74u, 0xe8u, 0xcbu,
			};
			constexpr std::array<qpl::u8, 256> sbox = {
				0x63u, 0x7cu, 0x77u, 0x7bu, 0xf2u, 0x6bu, 0x6fu, 0xc5u, 0x30u, 0x01u, 0x67u, 0x2bu, 0xfeu, 0xd7u, 0xabu, 0x76u,
				0xcau, 0x82u, 0xc9u, 0x7du, 0xfau, 0x59u, 0x47u, 0xf0u, 0xadu, 0xd4u, 0xa2u, 0xafu, 0x9cu, 0xa4u, 0x72u, 0xc0u,
				0xb7u, 0xfdu, 0x93u, 0x26u, 0x36u, 0x3fu, 0xf7u, 0xccu, 0x34u, 0xa5u, 0xe5u, 0xf1u, 0x71u, 0xd8u, 0x31u, 0x15u,
				0x04u, 0xc7u, 0x23u, 0xc3u, 0x18u, 0x96u, 0x05u, 0x9au, 0x07u, 0x12u, 0x80u, 0xe2u, 0xebu, 0x27u, 0xb2u, 0x75u,
				0x09u, 0x83u, 0x2cu, 0x1au, 0x1bu, 0x6eu, 0x5au, 0xa0u, 0x52u, 0x3bu, 0xd6u, 0xb3u, 0x29u, 0xe3u, 0x2fu, 0x84u,
				0x53u, 0xd1u, 0x00u, 0xedu, 0x20u, 0xfcu, 0xb1u, 0x5bu, 0x6au, 0xcbu, 0xbeu, 0x39u, 0x4au, 0x4cu, 0x58u, 0xcfu,
				0xd0u, 0xefu, 0xaau, 0xfbu, 0x43u, 0x4du, 0x33u, 0x85u, 0x45u, 0xf9u, 0x02u, 0x7fu, 0x50u, 0x3cu, 0x9fu, 0xa8u,
				0x51u, 0xa3u, 0x40u, 0x8fu, 0x92u, 0x9du, 0x38u, 0xf5u, 0xbcu, 0xb6u, 0xdau, 0x21u, 0x10u, 0xffu, 0xf3u, 0xd2u,
				0xcdu, 0x0cu, 0x13u, 0xecu, 0x5fu, 0x97u, 0x44u, 0x17u, 0xc4u, 0xa7u, 0x7eu, 0x3du, 0x64u, 0x5du, 0x19u, 0x73u,
				0x60u, 0x81u, 0x4fu, 0xdcu, 0x22u, 0x2au, 0x90u, 0x88u, 0x46u, 0xeeu, 0xb8u, 0x14u, 0xdeu, 0x5eu, 0x0bu, 0xdbu,
				0xe0u, 0x32u, 0x3au, 0x0au, 0x49u, 0x06u, 0x24u, 0x5cu, 0xc2u, 0xd3u, 0xacu, 0x62u, 0x91u, 0x95u, 0xe4u, 0x79u,
				0xe7u, 0xc8u, 0x37u, 0x6du, 0x8du, 0xd5u, 0x4eu, 0xa9u, 0x6cu, 0x56u, 0xf4u, 0xeau, 0x65u, 0x7au, 0xaeu, 0x08u,
				0xbau, 0x78u, 0x25u, 0x2eu, 0x1cu, 0xa6u, 0xb4u, 0xc6u, 0xe8u, 0xddu, 0x74u, 0x1fu, 0x4bu, 0xbdu, 0x8bu, 0x8au,
				0x70u, 0x3eu, 0xb5u, 0x66u, 0x48u, 0x03u, 0xf6u, 0x0eu, 0x61u, 0x35u, 0x57u, 0xb9u, 0x86u, 0xc1u, 0x1du, 0x9eu,
				0xe1u, 0xf8u, 0x98u, 0x11u, 0x69u, 0xd9u, 0x8eu, 0x94u, 0x9bu, 0x1eu, 0x87u, 0xe9u, 0xceu, 0x55u, 0x28u, 0xdfu,
				0x8cu, 0xa1u, 0x89u, 0x0du, 0xbfu, 0xe6u, 0x42u, 0x68u, 0x41u, 0x99u, 0x2du, 0x0fu, 0xb0u, 0x54u, 0xbbu, 0x16u,
			};
			constexpr std::array<qpl::u8, 256> sbox_inv = {
				0x52u, 0x09u, 0x6au, 0xd5u, 0x30u, 0x36u, 0xa5u, 0x38u, 0xbfu, 0x40u, 0xa3u, 0x9eu, 0x81u, 0xf3u, 0xd7u, 0xfbu,
				0x7cu, 0xe3u, 0x39u, 0x82u, 0x9bu, 0x2fu, 0xffu, 0x87u, 0x34u, 0x8eu, 0x43u, 0x44u, 0xc4u, 0xdeu, 0xe9u, 0xcbu,
				0x54u, 0x7bu, 0x94u, 0x32u, 0xa6u, 0xc2u, 0x23u, 0x3du, 0xeeu, 0x4cu, 0x95u, 0x0bu, 0x42u, 0xfau, 0xc3u, 0x4eu,
				0x08u, 0x2eu, 0xa1u, 0x66u, 0x28u, 0xd9u, 0x24u, 0xb2u, 0x76u, 0x5bu, 0xa2u, 0x49u, 0x6du, 0x8bu, 0xd1u, 0x25u,
				0x72u, 0xf8u, 0xf6u, 0x64u, 0x86u, 0x68u, 0x98u, 0x16u, 0xd4u, 0xa4u, 0x5cu, 0xccu, 0x5du, 0x65u, 0xb6u, 0x92u,
				0x6cu, 0x70u, 0x48u, 0x50u, 0xfdu, 0xedu, 0xb9u, 0xdau, 0x5eu, 0x15u, 0x46u, 0x57u, 0xa7u, 0x8du, 0x9du, 0x84u,
				0x90u, 0xd8u, 0xabu, 0x00u, 0x8cu, 0xbcu, 0xd3u, 0x0au, 0xf7u, 0xe4u, 0x58u, 0x05u, 0xb8u, 0xb3u, 0x45u, 0x06u,
				0xd0u, 0x2cu, 0x1eu, 0x8fu, 0xcau, 0x3fu, 0x0fu, 0x02u, 0xc1u, 0xafu, 0xbdu, 0x03u, 0x01u, 0x13u, 0x8au, 0x6bu,
				0x3au, 0x91u, 0x11u, 0x41u, 0x4fu, 0x67u, 0xdcu, 0xeau, 0x97u, 0xf2u, 0xcfu, 0xceu, 0xf0u, 0xb4u, 0xe6u, 0x73u,
				0x96u, 0xacu, 0x74u, 0x22u, 0xe7u, 0xadu, 0x35u, 0x85u, 0xe2u, 0xf9u, 0x37u, 0xe8u, 0x1cu, 0x75u, 0xdfu, 0x6eu,
				0x47u, 0xf1u, 0x1au, 0x71u, 0x1du, 0x29u, 0xc5u, 0x89u, 0x6fu, 0xb7u, 0x62u, 0x0eu, 0xaau, 0x18u, 0xbeu, 0x1bu,
				0xfcu, 0x56u, 0x3eu, 0x4bu, 0xc6u, 0xd2u, 0x79u, 0x20u, 0x9au, 0xdbu, 0xc0u, 0xfeu, 0x78u, 0xcdu, 0x5au, 0xf4u,
				0x1fu, 0xddu, 0xa8u, 0x33u, 0x88u, 0x07u, 0xc7u, 0x31u, 0xb1u, 0x12u, 0x10u, 0x59u, 0x27u, 0x80u, 0xecu, 0x5fu,
				0x60u, 0x51u, 0x7fu, 0xa9u, 0x19u, 0xb5u, 0x4au, 0x0du, 0x2du, 0xe5u, 0x7au, 0x9fu, 0x93u, 0xc9u, 0x9cu, 0xefu,
				0xa0u, 0xe0u, 0x3bu, 0x4du, 0xaeu, 0x2au, 0xf5u, 0xb0u, 0xc8u, 0xebu, 0xbbu, 0x3cu, 0x83u, 0x53u, 0x99u, 0x61u,
				0x17u, 0x2bu, 0x04u, 0x7eu, 0xbau, 0x77u, 0xd6u, 0x26u, 0xe1u, 0x69u, 0x14u, 0x63u, 0x55u, 0x21u, 0x0cu, 0x7du,
			};
		}



		QPLDLL extern std::unique_ptr<qpl::detail::aes_tables_t> aes_tables_deprecated;


		QPLDLL qpl::u8 galois_field_mul(qpl::u8 x, qpl::u8 y);


		QPLDLL void calculate_mul1();
		QPLDLL void calculate_mul2();
		QPLDLL void calculate_mul3();
		QPLDLL void calculate_rcon();

		QPLDLL void calculate_sbox();
		QPLDLL void calculate_sbox_inv();
	}

	QPLDLL void generate_all_aes_tables();

	class aes {
	public:
		enum class mode {
			_128, _192, _256
		};

		aes(bool construct = true) {
			this->m_state.fill(0u);
			if (construct) {
				this->construct();
			}
		}

		QPLDLL std::string encrypted(const std::array<qpl::u8, 16>& message, const std::string& key);
		QPLDLL std::string encrypted(const qpl::u8* message, qpl::size size, const std::string& key);
		QPLDLL std::string encrypted(const std::string& message, const std::string& key);
		QPLDLL std::wstring encrypted(const std::wstring& message, const std::string& key);
		QPLDLL std::string encrypted(const std::vector<char>& message, const std::string& key);
		QPLDLL std::wstring encrypted(const std::vector<wchar_t>& message, const std::string& key);

		QPLDLL void encrypt(std::string& message, const std::string& key);
		QPLDLL void encrypt(std::wstring& message, const std::string& key);

		QPLDLL std::string decrypted(const std::array<qpl::u8, 16>& message, const std::string& key);
		QPLDLL std::string decrypted(const qpl::u8* message, qpl::size size, const std::string& key, bool remove_null_terminations = false);
		QPLDLL std::string decrypted(const std::string& message, const std::string& key, bool remove_null_terminations = false);
		QPLDLL std::wstring decrypted(const std::wstring& message, const std::string& key, bool remove_null_terminations = false);
		QPLDLL std::string decrypted(const std::vector<char>& message, const std::string& key, bool remove_null_terminations = false);
		QPLDLL std::wstring decrypted(const std::vector<wchar_t>& message, const std::string& key, bool remove_null_terminations = false);

		QPLDLL void decrypt(std::string& message, const std::string& key, bool remove_null_terminations = false);
		QPLDLL void decrypt(std::wstring& message, const std::string& key, bool remove_null_terminations = false);

		QPLDLL void set_mode(mode m);
		QPLDLL void set_cipher_rounds(qpl::size count);
		QPLDLL qpl::size get_cipher_rounds() const;
		QPLDLL void copy_message(qpl::u8* newState) const;
		QPLDLL std::string get_message() const;

		QPLDLL bool is_constructed() const;
		QPLDLL void construct();
	private:
		QPLDLL void error_if_not_constructed() const;
		QPLDLL void check_constructed();

		QPLDLL void set_state(const std::array<qpl::u8, 16>& state);
		QPLDLL void set_state(const std::string state);
		QPLDLL void set_key(const std::vector<qpl::u8>& key);
		QPLDLL void set_key(const std::string& key);


		QPLDLL void expand_key();
		QPLDLL void cipher();
		QPLDLL void decipher();
		QPLDLL void add_round_key(qpl::size rounds);
		QPLDLL void sub_bytes();
		QPLDLL void unsub_bytes();
		QPLDLL void shift_rows();
		QPLDLL void unshift_rows();
		QPLDLL void mix_columns();
		QPLDLL void unmix_columns();

		bool m_constructed = false;
		mode m_mode = mode::_128;
		std::array<qpl::u8, 16> m_state;
		std::vector<qpl::u8> m_key;
		std::vector<qpl::u8> m_round_key;

		qpl::size m_key_size = 0u;
		qpl::size m_cipher_rounds = 0u;
		qpl::size m_round_key_size = 0u;

	};
	namespace detail {
		QPLDLL extern qpl::aes aes;
	}

	QPLDLL std::string aes_256_encrypted(const std::string& message, const std::string& key);
	QPLDLL std::string aes_192_encrypted(const std::string& message, const std::string& key);
	QPLDLL std::string aes_128_encrypted(const std::string& message, const std::string& key);

	QPLDLL std::string aes_256_encrypted(const std::string& message, const std::array<qpl::u64, 4>& key);
	QPLDLL std::string aes_192_encrypted(const std::string& message, const std::array<qpl::u64, 3>& key);
	QPLDLL std::string aes_128_encrypted(const std::string& message, const std::array<qpl::u64, 2>& key);

	QPLDLL std::string aes_256_decrypted(const std::string& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL std::string aes_192_decrypted(const std::string& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL std::string aes_128_decrypted(const std::string& message, const std::string& key, bool remove_null_terminations = false);

	QPLDLL std::string aes_256_decrypted(const std::string& message, const std::array<qpl::u64, 4>& key, bool remove_null_terminations = false);
	QPLDLL std::string aes_192_decrypted(const std::string& message, const std::array<qpl::u64, 3>& key, bool remove_null_terminations = false);
	QPLDLL std::string aes_128_decrypted(const std::string& message, const std::array<qpl::u64, 2>& key, bool remove_null_terminations = false);

	QPLDLL void aes_256_encrypt(std::string& message, const std::string& key);
	QPLDLL void aes_192_encrypt(std::string& message, const std::string& key);
	QPLDLL void aes_128_encrypt(std::string& message, const std::string& key);

	QPLDLL void aes_256_encrypt(std::string& message, const std::array<qpl::u64, 4>& key);
	QPLDLL void aes_192_encrypt(std::string& message, const std::array<qpl::u64, 3>& key);
	QPLDLL void aes_128_encrypt(std::string& message, const std::array<qpl::u64, 2>& key);
		
	QPLDLL void aes_256_decrypt(std::string& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL void aes_192_decrypt(std::string& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL void aes_128_decrypt(std::string& message, const std::string& key, bool remove_null_terminations = false);

	QPLDLL void aes_256_decrypt(std::string& message, const std::array<qpl::u64, 4>& key, bool remove_null_terminations = false);
	QPLDLL void aes_192_decrypt(std::string& message, const std::array<qpl::u64, 3>& key, bool remove_null_terminations = false);
	QPLDLL void aes_128_decrypt(std::string& message, const std::array<qpl::u64, 2>& key, bool remove_null_terminations = false);

	QPLDLL std::wstring aes_256_encrypted(const std::wstring& message, const std::string& key);
	QPLDLL std::wstring aes_192_encrypted(const std::wstring& message, const std::string& key);
	QPLDLL std::wstring aes_128_encrypted(const std::wstring& message, const std::string& key);
				
	QPLDLL std::wstring aes_256_decrypted(const std::wstring& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL std::wstring aes_192_decrypted(const std::wstring& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL std::wstring aes_128_decrypted(const std::wstring& message, const std::string& key, bool remove_null_terminations = false);

	QPLDLL void aes_256_encrypt(std::wstring& message, const std::string& key);
	QPLDLL void aes_192_encrypt(std::wstring& message, const std::string& key);
	QPLDLL void aes_128_encrypt(std::wstring& message, const std::string& key);

	QPLDLL void aes_256_decrypt(std::wstring& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL void aes_192_decrypt(std::wstring& message, const std::string& key, bool remove_null_terminations = false);
	QPLDLL void aes_128_decrypt(std::wstring& message, const std::string& key, bool remove_null_terminations = false);

	QPLDLL void make_string_multiple_of_16_bytes(std::string& string);

	QPLDLL std::string encrypt(const std::string& message, const std::string& key);
	QPLDLL std::string decrypt(const std::string& message, const std::string& key, bool remove_null_terminations = false);

	template<typename T, qpl::size N>
	std::string encrypt(const std::string& message, const std::array<T, N>& key) {
		constexpr auto bit_size = qpl::bits_in_type<T>() * N;
		std::string s;
		qpl::container_memory_to_string(key, s);
		if constexpr (bit_size <= 128) {
			return qpl::aes_128_encrypted(message, s);
		}
		else if constexpr (bit_size <= 192) {
			return qpl::aes_192_encrypted(message, s);
		}
		else {
			return qpl::aes_256_encrypted(message, s);
		}
	}
	template<typename T, qpl::size N>
	std::string decrypt(const std::string& message, const std::array<T, N>& key, bool remove_null_terminations = false) {
		auto bit_size = qpl::bits_in_type<T>() * N;
		std::string s;
		qpl::container_memory_to_string(key, s);
		if (bit_size <= 128) {
			return qpl::aes_128_decrypted(message, s, remove_null_terminations);
		}
		else if (bit_size <= 192) {
			return qpl::aes_192_decrypted(message, s, remove_null_terminations);
		}
		else {
			return qpl::aes_256_decrypted(message, s, remove_null_terminations);
		}
	}
	QPLDLL void aes_128_encrypt_keep_size(std::string& string, const std::string& key);
	QPLDLL std::string aes_128_encrypted_keep_size(std::string string, const std::string& key);
	QPLDLL void aes_128_decrypt_keep_size(std::string& string, const std::string& key);
	QPLDLL std::string aes_128_decrypted_keep_size(std::string string, const std::string& key);

	QPLDLL void aes_192_encrypt_keep_size(std::string& string, const std::string& key);
	QPLDLL std::string aes_192_encrypted_keep_size(std::string string, const std::string& key);
	QPLDLL void aes_192_decrypt_keep_size(std::string& string, const std::string& key);
	QPLDLL std::string aes_192_decrypted_keep_size(std::string string, const std::string& key);

	QPLDLL void aes_256_encrypt_keep_size(std::string& string, const std::string& key);
	QPLDLL std::string aes_256_encrypted_keep_size(std::string string, const std::string& key);
	QPLDLL void aes_256_decrypt_keep_size(std::string& string, const std::string& key);
	QPLDLL std::string aes_256_decrypted_keep_size(std::string string, const std::string& key);

	QPLDLL void encrypt_keep_size(std::string& string, const std::string& key, qpl::aes::mode mode = qpl::aes::mode::_256);
	QPLDLL std::string encrypted_keep_size(std::string string, const std::string& key, qpl::aes::mode mode = qpl::aes::mode::_256);
	QPLDLL void decrypt_keep_size(std::string& string, const std::string& key, qpl::aes::mode mode = qpl::aes::mode::_256);
	QPLDLL std::string decrypted_keep_size(std::string string, const std::string& key, qpl::aes::mode mode = qpl::aes::mode::_256);

}

#endif